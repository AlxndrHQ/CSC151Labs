{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red229\green168\blue255;\red1\green25\blue64;\red255\green255\blue255;
\red255\green236\blue157;\red253\green136\blue147;\red174\green208\blue255;\red95\green112\blue168;\red139\green255\blue255;
\red200\green241\blue153;\red254\green185\blue125;}
{\*\expandedcolortbl;;\cssrgb\c92157\c73333\c100000;\cssrgb\c0\c14118\c31765;\cssrgb\c100000\c100000\c100000;
\cssrgb\c100000\c93333\c67843;\cssrgb\c100000\c61569\c64314;\cssrgb\c73333\c85490\c100000;\cssrgb\c44706\c52157\c71765;\cssrgb\c60000\c100000\c100000;
\cssrgb\c81961\c94510\c66275;\cssrgb\c100000\c77255\c56078;}
\margl1440\margr1440\vieww10460\viewh9600\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \cf2 \strokec2 java.\cf5 \strokec5 text\cf2 \strokec2 .\cf5 \strokec5 DecimalFormat\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf2 \strokec2 java.\cf5 \strokec5 util\cf2 \strokec2 .\cf5 \strokec5 Scanner\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf2 \strokec2 java.\cf5 \strokec5 util\cf2 \strokec2 .\cf5 \strokec5 Stack\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf2 \strokec2 java.\cf5 \strokec5 lang\cf2 \strokec2 .\cf6 \strokec6 *\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 WilliamsJrS_P4\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 static\cf4 \strokec4  \cf2 \strokec2 void\cf4 \strokec4  \cf7 \strokec7 main\cf4 \strokec4 (\cf5 \strokec5 String\cf4 \strokec4 [] \cf6 \strokec6 args\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf8 \strokec8 /*\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8          * For v2: - instantiate an object from the iceCream class to store the\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8          * customers data - at the end, ask if the user would like to place another\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8          * order - use user defined setter and getter methods to set and retrieve the\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8          * data to the respective class\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8          */\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3         \cf5 \strokec5 Scanner\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf2 \strokec2 new\cf4 \strokec4  \cf7 \strokec7 Scanner(\cf5 \strokec5 System\cf7 \strokec7 .\cf6 \strokec6 in\cf7 \strokec7 )\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 DecimalFormat\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf2 \strokec2 new\cf4 \strokec4  \cf7 \strokec7 DecimalFormat(\cf10 \strokec10 "#,###.00"\cf7 \strokec7 )\cf4 \strokec4 ;\cf8 \strokec8 // creates new Decimal Format object\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 anotherOrder\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf10 \strokec10 ""\cf4 \strokec4 ;\cf8 \strokec8 // used to determine if user wants to make anotherOrder\cf4 \cb1 \strokec4 \
\
\cb3         \cf2 \strokec2 do\cf4 \strokec4  \{\cb1 \
\cb3             \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 null\cf4 \strokec4 ;\cf8 \strokec8 // represents the ice-cream flavor you order\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 int\cf4 \strokec4  \cf6 \strokec6 noScoops\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 0\cf4 \strokec4 ;\cf8 \strokec8 // represents number of ice-cream scoops you order\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 float\cf4 \strokec4  \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 0.0F\cf4 \strokec4 ;\cf8 \strokec8 // represents cost of ice-cream per scoop, based on ice-cream flavor\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 float\cf4 \strokec4  \cf6 \strokec6 totalCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 0.0F\cf4 \strokec4 ;\cf8 \strokec8 // = a floating-point representing a total cost of ice-cream, i.e., aCost *\cf4 \cb1 \strokec4 \
\cb3                                    \cf8 \strokec8 // noScoop\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 int\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 0\cf4 \strokec4 ;\cf8 \strokec8 // = an integer input representing a bill that you use to pay for this ice-cream\cf4 \cb1 \strokec4 \
\cb3                          \cf8 \strokec8 // cone\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 float\cf4 \strokec4  \cf6 \strokec6 change\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 0.0F\cf4 \strokec4 ;\cf8 \strokec8 // = a floating-point representing a change after paying for this ice-cream cone\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 name\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf10 \strokec10 ""\cf4 \strokec4 ;\cf8 \strokec8 // used for name of order\cf4 \cb1 \strokec4 \
\
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "***Welcome to The Ice Cream Stand***"\cf4 \strokec4 );\cb1 \
\
\cb3             \cf2 \strokec2 while\cf4 \strokec4  (\cf6 \strokec6 name\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 ""\cf4 \strokec4 ))\cf8 \strokec8 // name cannot be blank\cf4 \cb1 \strokec4 \
\cb3             \{\cb1 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "What is the name for this order? (order must have a name)"\cf4 \strokec4 );\cb1 \
\cb3                 \cf6 \strokec6 name\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextLine\cf4 \strokec4 ();\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf8 \strokec8 // IceCream newOrder = new IceCream();// creates new object using iceCream class\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 // newOrder.setName(name);// gives the order a name\cf4 \cb1 \strokec4 \
\
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "Hello "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 name\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 " this is our Menu: "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 1. Vanilla: \cf11 \strokec11 \\t\cf10 \strokec10 $1.50 "\cf4 \cb1 \strokec4 \
\cb3                     \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 2. Chocolate: \cf11 \strokec11 \\t\cf10 \strokec10 $0.95"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 3. Strawberry: \cf11 \strokec11 \\t\cf10 \strokec10 $2.59"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 4. Blackberry: \cf11 \strokec11 \\t\cf10 \strokec10 $1.50"\cf4 \cb1 \strokec4 \
\cb3                     \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 5. Oreo: \cf11 \strokec11 \\t\cf10 \strokec10 $1.75"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 6. Rocky Road: \cf11 \strokec11 \\t\cf10 \strokec10 $1.99"\cf4 \strokec4 );\cb1 \
\cb3             \cf2 \strokec2 do\cf4 \strokec4  \{\cb1 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cb1 \
\cb3                         \cf6 \strokec6 name\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 ", What ice cream flavor would you like? (Enter the flavor name or a number 1-6) "\cf4 \strokec4 );\cb1 \
\cb3                 \cf6 \strokec6 flavor\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextLine\cf4 \strokec4 ();\cf8 \strokec8 // stores flavor choice that user would like\cf4 \cb1 \strokec4 \
\cb3             \} \cf2 \strokec2 while\cf4 \strokec4  (\cf9 \strokec9 !\cf4 \strokec4 (\cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "1"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "2"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "3"\cf4 \strokec4 )\cb1 \
\cb3                     \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "4"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "5"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "6"\cf4 \strokec4 )\cb1 \
\cb3                     \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "Vanilla"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "Chocolate"\cf4 \strokec4 )\cb1 \
\cb3                     \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "Strawberry"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "Blackberry"\cf4 \strokec4 )\cb1 \
\cb3                     \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "Oreo"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "Rocky Road"\cf4 \strokec4 )));\cb1 \
\
\cb3             \cf2 \strokec2 switch\cf4 \strokec4  (\cf6 \strokec6 flavor\cf4 \strokec4 ) \{\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf10 \strokec10 "1"\cf4 \strokec4 , \cf10 \strokec10 "Vanilla"\cf4 \strokec4 , \cf10 \strokec10 "vanilla"\cf2 \strokec2 :\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "\cf11 \strokec11 \\n\cf10 \strokec10 You chose Vanilla"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 1.50F\cf4 \strokec4 ;\cb1 \
\cb3                     \cf8 \strokec8 // newOrder.setFlavor(1);// stores the flavor to the order\cf4 \cb1 \strokec4 \
\cb3                     \cf8 \strokec8 // newOrder.setCost(scoopCost);// stores scoopCost to order\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf10 \strokec10 "Chocolate"\cf4 \strokec4 , \cf10 \strokec10 "2"\cf4 \strokec4 , \cf10 \strokec10 "chocolate"\cf2 \strokec2 :\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "\cf11 \strokec11 \\n\cf10 \strokec10 You chose Chocolate"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 0.95F\cf4 \strokec4 ;\cb1 \
\cb3                     \cf8 \strokec8 // newOrder.setFlavor(2);\cf4 \cb1 \strokec4 \
\cb3                     \cf8 \strokec8 // newOrder.setCost(scoopCost);\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf10 \strokec10 "Strawberry"\cf4 \strokec4 , \cf10 \strokec10 "3"\cf4 \strokec4 , \cf10 \strokec10 "strawberry"\cf2 \strokec2 :\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "\cf11 \strokec11 \\n\cf10 \strokec10 You chose Strawberry"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 2.59F\cf4 \strokec4 ;\cb1 \
\cb3                     \cf8 \strokec8 // newOrder.setFlavor(3);\cf4 \cb1 \strokec4 \
\cb3                     \cf8 \strokec8 // newOrder.setCost(scoopCost);\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf10 \strokec10 "Blackberry"\cf4 \strokec4 , \cf10 \strokec10 "4"\cf4 \strokec4 , \cf10 \strokec10 "blackberry"\cf2 \strokec2 :\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "\cf11 \strokec11 \\n\cf10 \strokec10 You chose Blackberry"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 1.50F\cf4 \strokec4 ;\cb1 \
\cb3                     \cf8 \strokec8 // newOrder.setFlavor(4);\cf4 \cb1 \strokec4 \
\cb3                     \cf8 \strokec8 // newOrder.setCost(scoopCost);\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf10 \strokec10 "Oreo"\cf4 \strokec4 , \cf10 \strokec10 "5"\cf4 \strokec4 , \cf10 \strokec10 "oreo"\cf2 \strokec2 :\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "\cf11 \strokec11 \\n\cf10 \strokec10 You chose Oreo"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 1.75F\cf4 \strokec4 ;\cb1 \
\cb3                     \cf8 \strokec8 // newOrder.setFlavor(5);\cf4 \cb1 \strokec4 \
\cb3                     \cf8 \strokec8 // newOrder.setCost(scoopCost);\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf10 \strokec10 "Rocky Road"\cf4 \strokec4 , \cf10 \strokec10 "6"\cf4 \strokec4 , \cf10 \strokec10 "rocky road"\cf2 \strokec2 :\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "\cf11 \strokec11 \\n\cf10 \strokec10 You chose Rocky Road"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf11 \strokec11 1.99F\cf4 \strokec4 ;\cb1 \
\cb3                     \cf8 \strokec8 // newOrder.setFlavor(6);\cf4 \cb1 \strokec4 \
\cb3                     \cf8 \strokec8 // newOrder.setCost(scoopCost);\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf2 \strokec2 default:\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "\cf11 \strokec11 \\n\cf10 \strokec10 Enter a valid choice (1-6)"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 flavor\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextLine\cf4 \strokec4 ();\cf8 \strokec8 // stores flavor choice that user would like\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf2 \strokec2 do\cf4 \strokec4  \{\cb1 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "How many scoops would you like? (must be between 1 and 10)"\cf4 \strokec4 );\cb1 \
\cb3                 \cf6 \strokec6 noScoops\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextInt\cf4 \strokec4 ();\cf8 \strokec8 // stores number of scoops\cf4 \cb1 \strokec4 \
\cb3             \} \cf2 \strokec2 while\cf4 \strokec4  (\cf9 \strokec9 !\cf4 \strokec4 (\cf6 \strokec6 noScoops\cf4 \strokec4  \cf9 \strokec9 >\cf4 \strokec4  \cf11 \strokec11 1\cf4 \strokec4  \cf9 \strokec9 &&\cf4 \strokec4  \cf6 \strokec6 noScoops\cf4 \strokec4  \cf9 \strokec9 <\cf4 \strokec4  \cf11 \strokec11 11\cf4 \strokec4 ));\cb1 \
\
\cb3             \cf8 \strokec8 // prints what the total cost is based on flavor and number of scoops\cf4 \cb1 \strokec4 \
\cb3             \cf6 \strokec6 totalCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 *\cf4 \strokec4  \cf6 \strokec6 noScoops\cf4 \strokec4 ;\cf8 \strokec8 // total cost of ice-cream based on number of scoops and type of ice cream\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "Your order of "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 " for $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 " per scoop costs $"\cf4 \cb1 \strokec4 \
\cb3                     \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 totalCost\cf4 \strokec4 ) \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "."\cf4 \strokec4 );\cb1 \
\
\cb3             \cf2 \strokec2 do\cf4 \strokec4  \{\cb1 \
\cb3                 \cf8 \strokec8 // asks user how large of a bill they would like to enter to pay for their bill\cf4 \cb1 \strokec4 \
\cb3                 \cf8 \strokec8 // used as long as the bill is not a 0, 1, 5, 10, or 20\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "Please enter your bill (Only: $1, $5, $10, $20, $50, $100)"\cf4 \strokec4 );\cb1 \
\cb3                 \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextInt\cf4 \strokec4 ();\cb1 \
\cb3             \} \cf2 \strokec2 while\cf4 \strokec4  (\cf9 \strokec9 !\cf4 \strokec4 (\cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 0\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 1\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 5\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 10\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 20\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 50\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 100\cf4 \strokec4 ));\cb1 \
\
\cb3             \cf2 \strokec2 double\cf4 \strokec4  \cf6 \strokec6 userTender\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  (\cf2 \strokec2 double\cf4 \strokec4 ) \cf6 \strokec6 bill\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "You have entered $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 userTender\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "."\cf4 \strokec4 );\cb1 \
\
\cb3             \cf2 \strokec2 double\cf4 \strokec4  \cf6 \strokec6 remaining\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 totalCost\cf4 \strokec4  \cf9 \strokec9 -\cf4 \strokec4  (\cf2 \strokec2 double\cf4 \strokec4 ) \cf6 \strokec6 userTender\cf4 \strokec4 ;\cb1 \
\
\cb3             \cf2 \strokec2 while\cf4 \strokec4  ((\cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 0\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 1\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 5\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 10\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 20\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 50\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 100\cf4 \strokec4 )) \{\cb1 \
\
\cb3                 \cf2 \strokec2 while\cf4 \strokec4  (\cf6 \strokec6 remaining\cf4 \strokec4  \cf9 \strokec9 >\cf4 \strokec4  \cf11 \strokec11 0.0\cf4 \strokec4 ) \{\cb1 \
\
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "Please enter an additional $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 remaining\cf4 \strokec4 )\cb1 \
\cb3                             \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 " to complete your order"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextInt\cf4 \strokec4 ();\cb1 \
\
\cb3                     \cf2 \strokec2 while\cf4 \strokec4  (\cf9 \strokec9 !\cf4 \strokec4 (\cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 0\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 1\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 5\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 10\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 20\cf4 \strokec4  \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 50\cf4 \cb1 \strokec4 \
\cb3                             \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 ==\cf4 \strokec4  \cf11 \strokec11 100\cf4 \strokec4 )) \{\cf8 \strokec8 // bill must be 1, 5, 10, 20, 50, or 100\cf4 \cb1 \strokec4 \
\
\cb3                         \cf8 \strokec8 // asks user how large of a bill they would like to enter to pay for their bill\cf4 \cb1 \strokec4 \
\cb3                         \cf8 \strokec8 // used as long as the bill is not a 0, 1, 5, 10, or 20\cf4 \cb1 \strokec4 \
\cb3                         \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "Please enter your bill (Only: $1, $5, $10, $20, $50, $100)"\cf4 \strokec4 );\cb1 \
\cb3                         \cf6 \strokec6 bill\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextInt\cf4 \strokec4 ();\cb1 \
\cb3                     \}\cb1 \
\cb3                     \cf6 \strokec6 userTender\cf4 \strokec4  \cf9 \strokec9 +=\cf4 \strokec4  \cf6 \strokec6 bill\cf4 \strokec4 ;\cf8 \strokec8 // adds the bill entered to the user's tender\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "You have entered $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 userTender\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 " in total."\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 remaining\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 totalCost\cf4 \strokec4  \cf9 \strokec9 -\cf4 \strokec4  (\cf2 \strokec2 double\cf4 \strokec4 ) \cf6 \strokec6 userTender\cf4 \strokec4 ;\cf8 \strokec8 // subtracts the remaining amount from what the user\cf4 \cb1 \strokec4 \
\cb3                                                                 \cf8 \strokec8 // entered minus the total cost of their tab\cf4 \cb1 \strokec4 \
\
\cb3                     \cf2 \strokec2 if\cf4 \strokec4  (\cf6 \strokec6 remaining\cf4 \strokec4  \cf9 \strokec9 >\cf4 \strokec4  \cf11 \strokec11 0.0\cf4 \strokec4 ) \{\cb1 \
\cb3                         \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "You owe an additional $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 remaining\cf4 \strokec4 ));\cb1 \
\cb3                     \}\cb1 \
\
\cb3                 \}\cb1 \
\
\cb3                 \cf2 \strokec2 if\cf4 \strokec4  (\cf6 \strokec6 userTender\cf4 \strokec4  \cf9 \strokec9 >\cf4 \strokec4  \cf6 \strokec6 remaining\cf4 \strokec4 ) \{\cf8 \strokec8 // userTender was larger than cost\cf4 \cb1 \strokec4 \
\cb3                     \cf6 \strokec6 change\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  (\cf2 \strokec2 float\cf4 \strokec4 ) \cf6 \strokec6 userTender\cf4 \strokec4  \cf9 \strokec9 -\cf4 \strokec4  \cf6 \strokec6 totalCost\cf4 \strokec4 ;\cf8 \strokec8 // a floating-point representing a change after paying for\cf4 \cb1 \strokec4 \
\cb3                                                             \cf8 \strokec8 // this ice-cream cone\cf4 \cb1 \strokec4 \
\cb3                     \cf2 \strokec2 break\cf4 \strokec4 ;\cb1 \
\cb3                 \}\cb1 \
\
\cb3             \}\cb1 \
\
\cb3             \cf6 \strokec6 change\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  (\cf2 \strokec2 float\cf4 \strokec4 ) \cf6 \strokec6 userTender\cf4 \strokec4  \cf9 \strokec9 -\cf4 \strokec4  \cf6 \strokec6 totalCost\cf4 \strokec4 ;\cf8 \strokec8 // a floating-point representing a change after paying for this\cf4 \cb1 \strokec4 \
\cb3                                                     \cf8 \strokec8 // ice-cream cone\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "Your change is $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 change\cf4 \strokec4 ));\cb1 \
\
\cb3             \cf8 \strokec8 // needs to calculate how many more scoops you can get\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 // remaining scoops = change / price per scoop\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 float\cf4 \strokec4  \cf6 \strokec6 remainingScoops\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 change\cf4 \strokec4  \cf9 \strokec9 /\cf4 \strokec4  \cf6 \strokec6 scoopCost\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "With $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 change\cf4 \strokec4 ) \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 ", you can get "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  (\cf2 \strokec2 int\cf4 \strokec4 ) \cf6 \strokec6 remainingScoops\cf4 \cb1 \strokec4 \
\cb3                     \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 " more whole scoops of "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 );\cb1 \
\
\cb3             \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 anotherScoop\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf10 \strokec10 ""\cf4 \strokec4 ;\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  (\cf6 \strokec6 remainingScoops\cf4 \strokec4  \cf9 \strokec9 >\cf4 \strokec4  \cf11 \strokec11 1\cf4 \strokec4 ) \{\cb1 \
\
\cb3                 \cf2 \strokec2 do\cf4 \strokec4  \{\cb1 \
\cb3                     \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cb1 \
\cb3                             \cf10 \strokec10 "Would you like to get another scoop of "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "? (Only enter \cf11 \strokec11 \\"\cf10 \strokec10 yes\cf11 \strokec11 \\"\cf10 \strokec10  or \cf11 \strokec11 \\"\cf10 \strokec10 no\cf11 \strokec11 \\"\cf10 \strokec10 )"\cf4 \strokec4 );\cb1 \
\cb3                     \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextLine\cf4 \strokec4 ();\cf8 \strokec8 // clears buffer\cf4 \cb1 \strokec4 \
\cb3                     \cf6 \strokec6 anotherScoop\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextLine\cf4 \strokec4 ();\cb1 \
\cb3                 \} \cf2 \strokec2 while\cf4 \strokec4  (\cf9 \strokec9 !\cf4 \strokec4 (\cf6 \strokec6 anotherScoop\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "no"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 anotherScoop\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "yes"\cf4 \strokec4 )));\cb1 \
\
\cb3             \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3                 \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextLine\cf4 \strokec4 ();\cf8 \strokec8 // clears buffer\cf4 \cb1 \strokec4 \
\cb3                 \cf8 \strokec8 // break;\cf4 \cb1 \strokec4 \
\cb3             \}\cb1 \
\
\cb3             \cf2 \strokec2 while\cf4 \strokec4  (\cf6 \strokec6 remainingScoops\cf4 \strokec4  \cf9 \strokec9 >\cf4 \strokec4  \cf11 \strokec11 1\cf4 \strokec4  \cf9 \strokec9 &&\cf4 \strokec4  \cf6 \strokec6 anotherScoop\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "yes"\cf4 \strokec4 )) \{\cb1 \
\
\cb3                 \cf6 \strokec6 noScoops\cf9 \strokec9 ++\cf4 \strokec4 ;\cf8 \strokec8 // add one to number of scoops\cf4 \cb1 \strokec4 \
\cb3                 \cf6 \strokec6 totalCost\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 scoopCost\cf4 \strokec4  \cf9 \strokec9 *\cf4 \strokec4  \cf6 \strokec6 noScoops\cf4 \strokec4 ;\cf8 \strokec8 // adds onto total cost\cf4 \cb1 \strokec4 \
\cb3                 \cf6 \strokec6 change\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  (\cf2 \strokec2 float\cf4 \strokec4 ) \cf6 \strokec6 userTender\cf4 \strokec4  \cf9 \strokec9 -\cf4 \strokec4  \cf6 \strokec6 totalCost\cf4 \strokec4 ;\cf8 \strokec8 // calculates how much change remains\cf4 \cb1 \strokec4 \
\cb3                 \cf6 \strokec6 change\cf4 \strokec4  \cf9 \strokec9 -=\cf4 \strokec4  \cf6 \strokec6 scoopCost\cf4 \strokec4 ;\cf8 \strokec8 // subtract that latest scoop cost from the change\cf4 \cb1 \strokec4 \
\
\cb3                 \cf6 \strokec6 remainingScoops\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 change\cf4 \strokec4  \cf9 \strokec9 /\cf4 \strokec4  \cf6 \strokec6 scoopCost\cf4 \strokec4 ;\cb1 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "With $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 change\cf4 \strokec4 ) \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 ", you can get "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  (\cf2 \strokec2 int\cf4 \strokec4 ) \cf6 \strokec6 remainingScoops\cf4 \cb1 \strokec4 \
\cb3                         \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 " more whole scoops of "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4 );\cb1 \
\
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cb1 \
\cb3                         \cf10 \strokec10 "Would you like to get another scoop of "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "? (Only enter \cf11 \strokec11 \\"\cf10 \strokec10 yes\cf11 \strokec11 \\"\cf10 \strokec10  or \cf11 \strokec11 \\"\cf10 \strokec10 no\cf11 \strokec11 \\"\cf10 \strokec10 )"\cf4 \strokec4 );\cb1 \
\
\cb3                 \cf6 \strokec6 anotherScoop\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextLine\cf4 \strokec4 ();\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf2 \strokec2 do\cf8 \strokec8 // user must only enter yes or no\cf4 \cb1 \strokec4 \
\cb3             \{\cb1 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "Would you like to place another order? (Must be \cf11 \strokec11 \\"\cf10 \strokec10 yes\cf11 \strokec11 \\"\cf10 \strokec10  or \cf11 \strokec11 \\"\cf10 \strokec10 no\cf11 \strokec11 \\"\cf10 \strokec10 )"\cf4 \strokec4 );\cb1 \
\cb3                 \cf6 \strokec6 anotherOrder\cf4 \strokec4  \cf9 \strokec9 =\cf4 \strokec4  \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 nextLine\cf4 \strokec4 ();\cb1 \
\cb3             \} \cf2 \strokec2 while\cf4 \strokec4  (\cf9 \strokec9 !\cf4 \strokec4 (\cf6 \strokec6 anotherOrder\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "yes"\cf4 \strokec4 ) \cf9 \strokec9 ||\cf4 \strokec4  \cf6 \strokec6 anotherOrder\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "no"\cf4 \strokec4 )));\cb1 \
\
\cb3             \cf8 \strokec8 // returns a reciept for what the user ordered\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "*************************"\cf4 \strokec4 );\cb1 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf6 \strokec6 name\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 ", here is your reciept: "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 Ice Cream Flavor: "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \cb1 \strokec4 \
\cb3                     \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 Number of scoops for "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 flavor\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 ": "\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 noScoops\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 Price Per Scoop: $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 scoopCost\cf4 \strokec4 )\cb1 \
\cb3                     \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 Total Cost: $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 totalCost\cf4 \strokec4 ) \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 Total amount that you entered: $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 userTender\cf4 \strokec4 )\cb1 \
\cb3                     \cf9 \strokec9 +\cf4 \strokec4  \cf10 \strokec10 "\cf11 \strokec11 \\n\\t\cf10 \strokec10 Change given: $"\cf4 \strokec4  \cf9 \strokec9 +\cf4 \strokec4  \cf6 \strokec6 decimalFormat\cf4 \strokec4 .\cf7 \strokec7 format\cf4 \strokec4 (\cf6 \strokec6 change\cf4 \strokec4 ));\cb1 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "*************************"\cf4 \strokec4 );\cb1 \
\
\cb3         \} \cf2 \strokec2 while\cf4 \strokec4  (\cf9 \strokec9 !\cf4 \strokec4 (\cf6 \strokec6 anotherOrder\cf4 \strokec4 .\cf7 \strokec7 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "no"\cf4 \strokec4 )));\cb1 \
\
\cb3         \cf5 \strokec5 System\cf4 \strokec4 .\cf6 \strokec6 out\cf4 \strokec4 .\cf7 \strokec7 println\cf4 \strokec4 (\cf10 \strokec10 "\cf11 \strokec11 \\n\cf10 \strokec10 Thank you for visiting the Ice Cream stand! \cf11 \strokec11 \\n\cf10 \strokec10 Come again soon!"\cf4 \strokec4 );\cb1 \
\
\cb3         \cf6 \strokec6 keyboard\cf4 \strokec4 .\cf7 \strokec7 close\cf4 \strokec4 ();\cf8 \strokec8 // closes keyboard Scanner object\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
}