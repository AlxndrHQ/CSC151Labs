{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;
\red67\green192\blue160;\red212\green214\blue154;\red140\green211\blue254;\red89\green138\blue67;\red183\green111\blue179;
\red194\green126\blue101;\red167\green197\blue152;\red205\green173\blue106;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c41569\c60000\c33333;\cssrgb\c77255\c52549\c75294;
\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;\cssrgb\c84314\c72941\c49020;}
\margl1440\margr1440\vieww10460\viewh9600\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  java.\cf5 \strokec5 text\cf4 \strokec4 .\cf5 \strokec5 DecimalFormat\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.\cf5 \strokec5 util\cf4 \strokec4 .\cf5 \strokec5 Scanner\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.\cf5 \strokec5 util\cf4 \strokec4 .\cf5 \strokec5 Stack\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.\cf5 \strokec5 lang\cf4 \strokec4 .*;\cb1 \
\
\cf2 \cb3 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 IceCreamDriver\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \{\cb1 \
\cb3     \cf2 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 static\cf4 \strokec4  \cf5 \strokec5 void\cf4 \strokec4  \cf6 \strokec6 main\cf4 \strokec4 (\cf5 \strokec5 String\cf4 \strokec4 [] \cf7 \strokec7 args\cf4 \strokec4 )\cb1 \
\cb3     \{\cb1 \
\cb3         \cf8 \strokec8 /*\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8             For v2:\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             - instantiate an object from the iceCream class to store the customers data\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             - at the end, ask if the user would like to place another order\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             - use user defined setter and getter methods to set and retrieve the data to the respective class \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8         */\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3         \cf5 \strokec5 Scanner\cf4 \strokec4  \cf7 \strokec7 keyboard\cf4 \strokec4  = \cf9 \strokec9 new\cf4 \strokec4  \cf6 \strokec6 Scanner\cf4 \strokec4 (\cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 in\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 DecimalFormat\cf4 \strokec4  \cf7 \strokec7 decimalFormat\cf4 \strokec4  = \cf9 \strokec9 new\cf4 \strokec4  \cf6 \strokec6 DecimalFormat\cf4 \strokec4 (\cf10 \strokec10 "#,###.##"\cf4 \strokec4 );\cf8 \strokec8 // creates new Decimal Format object \cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 String\cf4 \strokec4  \cf7 \strokec7 again\cf4 \strokec4  = \cf10 \strokec10 "yes"\cf4 \strokec4 ;\cf8 \strokec8 // used to determine if user wants to run test again or not \cf4 \cb1 \strokec4 \
\
\cb3         \cf9 \strokec9 do\cf4 \cb1 \strokec4 \
\cb3         \{\cb1 \
\cb3             \cf5 \strokec5 String\cf4 \strokec4  \cf7 \strokec7 flavor\cf4 \strokec4  = \cf2 \strokec2 null\cf4 \strokec4 ;\cf8 \strokec8 // represents the ice-cream flavor you order\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int\cf4 \strokec4  \cf7 \strokec7 noScoops\cf4 \strokec4  = \cf11 \strokec11 0\cf4 \strokec4 ;\cf8 \strokec8 // represents number of ice-cream scoops you order\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 float\cf4 \strokec4  \cf7 \strokec7 scoopCost\cf4 \strokec4  = \cf11 \strokec11 0.0F\cf4 \strokec4 ;\cf8 \strokec8 // represents cost of ice-cream per scoop, based on ice-cream flavor\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 float\cf4 \strokec4  \cf7 \strokec7 totalCost\cf4 \strokec4  = \cf11 \strokec11 0.0F\cf4 \strokec4 ;\cf8 \strokec8 // = a floating-point representing a total cost of ice-cream, i.e., aCost * noScoop\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int\cf4 \strokec4  \cf7 \strokec7 bill\cf4 \strokec4  = \cf11 \strokec11 0\cf4 \strokec4 ;\cf8 \strokec8 // = an integer input representing a bill that you use to pay for this ice-cream cone\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 float\cf4 \strokec4  \cf7 \strokec7 change\cf4 \strokec4  = \cf11 \strokec11 0.0F\cf4 \strokec4 ;\cf8 \strokec8 // = a floating-point representing a change after paying for this ice-cream cone\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 String\cf4 \strokec4  \cf7 \strokec7 name\cf4 \strokec4  = \cf2 \strokec2 null\cf4 \strokec4 ;\cf8 \strokec8 // used for name of order \cf4 \cb1 \strokec4 \
\
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "***Welcome to The Ice Cream Stand***"\cf4 \strokec4 );\cb1 \
\cb3             \cb1 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "What is the name for this order?"\cf4 \strokec4 );\cb1 \
\cb3             \cf7 \strokec7 name\cf4 \strokec4  = \cf7 \strokec7 keyboard\cf4 \strokec4 .\cf6 \strokec6 nextLine\cf4 \strokec4 ();\cb1 \
\cb3             \cb1 \
\cb3             \cf5 \strokec5 IceCream\cf4 \strokec4  \cf7 \strokec7 newOrder\cf4 \strokec4  = \cf9 \strokec9 new\cf4 \strokec4  \cf6 \strokec6 IceCream\cf4 \strokec4 ();\cf8 \strokec8 // creates new object using iceCream class\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setName\cf4 \strokec4 (\cf7 \strokec7 name\cf4 \strokec4 );\cf8 \strokec8 // gives the order a name\cf4 \cb1 \strokec4 \
\
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "Hello "\cf4 \strokec4  + \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 getName\cf4 \strokec4 () + \cf10 \strokec10 ", this is our Menu: "\cf4 \cb1 \strokec4 \
\cb3                                     + \cf10 \strokec10 "\cf12 \strokec12 \\n\\t\cf10 \strokec10 1. Vanilla: \cf12 \strokec12 \\t\cf10 \strokec10 $1.50 "\cf4 \strokec4  \cb1 \
\cb3                                     + \cf10 \strokec10 "\cf12 \strokec12 \\n\\t\cf10 \strokec10 2. Chocolate: \cf12 \strokec12 \\t\cf10 \strokec10 $0.95"\cf4 \strokec4  \cb1 \
\cb3                                     + \cf10 \strokec10 "\cf12 \strokec12 \\n\\t\cf10 \strokec10 3. Strawberry: \cf12 \strokec12 \\t\cf10 \strokec10 $2.59"\cf4 \cb1 \strokec4 \
\cb3                                     + \cf10 \strokec10 "\cf12 \strokec12 \\n\\t\cf10 \strokec10 4. Blackberry: \cf12 \strokec12 \\t\cf10 \strokec10 $1.50"\cf4 \cb1 \strokec4 \
\cb3                                     + \cf10 \strokec10 "\cf12 \strokec12 \\n\\t\cf10 \strokec10 5. Oreo: \cf12 \strokec12 \\t\cf10 \strokec10 $1.75"\cf4 \cb1 \strokec4 \
\cb3                                     + \cf10 \strokec10 "\cf12 \strokec12 \\n\\t\cf10 \strokec10 6. Rocky Road: \cf12 \strokec12 \\t\cf10 \strokec10 $1.99"\cf4 \cb1 \strokec4 \
\cb3                                     );\cb1 \
\cb3     \cb1 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 getName\cf4 \strokec4 () + \cf10 \strokec10 ", What ice cream flavor would you like? (Enter the flavor name or a number 1-6) "\cf4 \strokec4 );\cb1 \
\cb3             \cf7 \strokec7 flavor\cf4 \strokec4  = \cf7 \strokec7 keyboard\cf4 \strokec4 .\cf6 \strokec6 nextLine\cf4 \strokec4 ();\cf8 \strokec8 // stores flavor choice that user would like\cf4 \cb1 \strokec4 \
\cb3             \cf9 \strokec9 switch\cf4 \strokec4 (\cf7 \strokec7 flavor\cf4 \strokec4 )\cb1 \
\cb3             \{\cb1 \
\cb3                 \cf9 \strokec9 case\cf4 \strokec4  \cf10 \strokec10 "Vanilla"\cf4 \strokec4 , \cf10 \strokec10 "1"\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "You chose Vanilla"\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 scoopCost\cf4 \strokec4  = \cf11 \strokec11 1.50F\cf4 \strokec4 ;\cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setFlavor\cf4 \strokec4 (\cf7 \strokec7 flavor\cf4 \strokec4 );\cf8 \strokec8 // stores the flavor to the order \cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setCost\cf4 \strokec4 (\cf7 \strokec7 scoopCost\cf4 \strokec4 );\cf8 \strokec8 // stores scoopCost to order\cf4 \cb1 \strokec4 \
\cb3                 \cf9 \strokec9 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf9 \strokec9 case\cf4 \strokec4  \cf10 \strokec10 "Chocolate"\cf4 \strokec4 , \cf10 \strokec10 "2"\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "You chose Chocolate"\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 scoopCost\cf4 \strokec4  = \cf11 \strokec11 0.95F\cf4 \strokec4 ;\cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setFlavor\cf4 \strokec4 (\cf7 \strokec7 flavor\cf4 \strokec4 ); \cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setCost\cf4 \strokec4 (\cf7 \strokec7 scoopCost\cf4 \strokec4 );\cb1 \
\cb3                 \cf9 \strokec9 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf9 \strokec9 case\cf4 \strokec4  \cf10 \strokec10 "Strawberry"\cf4 \strokec4 ,\cf10 \strokec10 "3"\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "You chose Strawberry"\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 scoopCost\cf4 \strokec4  = \cf11 \strokec11 2.59F\cf4 \strokec4 ;\cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setFlavor\cf4 \strokec4 (\cf7 \strokec7 flavor\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setCost\cf4 \strokec4 (\cf7 \strokec7 scoopCost\cf4 \strokec4 );\cb1 \
\cb3                 \cf9 \strokec9 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf9 \strokec9 case\cf4 \strokec4  \cf10 \strokec10 "Blackberry"\cf4 \strokec4 , \cf10 \strokec10 "4"\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "You chose Blackberry"\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 scoopCost\cf4 \strokec4  = \cf11 \strokec11 1.50F\cf4 \strokec4 ;\cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setFlavor\cf4 \strokec4 (\cf7 \strokec7 flavor\cf4 \strokec4 ); \cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setCost\cf4 \strokec4 (\cf7 \strokec7 scoopCost\cf4 \strokec4 );\cb1 \
\cb3                 \cf9 \strokec9 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf9 \strokec9 case\cf4 \strokec4  \cf10 \strokec10 "Oreo"\cf4 \strokec4 , \cf10 \strokec10 "5"\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "You chose Oreo"\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 scoopCost\cf4 \strokec4  = \cf11 \strokec11 1.75F\cf4 \strokec4 ;\cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setFlavor\cf4 \strokec4 (\cf7 \strokec7 flavor\cf4 \strokec4 ); \cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setCost\cf4 \strokec4 (\cf7 \strokec7 scoopCost\cf4 \strokec4 );\cb1 \
\cb3                 \cf9 \strokec9 break\cf4 \strokec4 ;\cb1 \
\cb3                 \cf9 \strokec9 case\cf4 \strokec4  \cf10 \strokec10 "Rocky Road"\cf4 \strokec4 , \cf10 \strokec10 "6"\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "You chose Rocky Road"\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 scoopCost\cf4 \strokec4  = \cf11 \strokec11 1.99F\cf4 \strokec4 ;\cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setFlavor\cf4 \strokec4 (\cf7 \strokec7 flavor\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 newOrder\cf4 \strokec4 .\cf6 \strokec6 setCost\cf4 \strokec4 (\cf7 \strokec7 scoopCost\cf4 \strokec4 );\cb1 \
\cb3                 \cf9 \strokec9 break\cf4 \strokec4 ;\cb1 \
\cb3             \}\cb1 \
\cb3             \cb1 \
\cb3             \cf9 \strokec9 do\cf4 \cb1 \strokec4 \
\cb3             \{\cb1 \
\cb3                 \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "How many scoops would you like? (must be more than 1)"\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 noScoops\cf4 \strokec4  = \cf7 \strokec7 keyboard\cf4 \strokec4 .\cf6 \strokec6 nextInt\cf4 \strokec4 ();\cf8 \strokec8 // stores number of scoops  \cf4 \cb1 \strokec4 \
\cb3             \} \cf9 \strokec9 while\cf4 \strokec4 (\cf7 \strokec7 noScoops\cf4 \strokec4  < \cf11 \strokec11 1\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3             \cf8 \strokec8 /*\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8             // prints what the total cost is based on flavor and number of scoops\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             totalCost = scoopCost * noScoops;// total cost of ice-cream based on number of scoops and type of ice cream\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             System.out.println("Your order of  " + newOrder.getFlavor() + " for " + newOrder.getScoops() + " scoops costs $" + decimalFormat.format(totalCost) + ".");\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8     \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             // asks user how large of a bill they would like to enter to pay for their bill\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             do\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             \{\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8                 System.out.println("Please enter your bill ($1, $5, $10, $20)");\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8                 bill = keyboard.nextInt();\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             \} while(! ( bill == 1 || bill == 5 || bill == 10 || bill == 20 ) );\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8     \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             change = bill - totalCost;// = a floating-point representing a change after paying for this ice-cream cone\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             System.out.println("Your change is $" + decimalFormat.format(change));\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8     \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             // needs to calculate how many more scoops you can get \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             // remaining scoops = change / price per scoop \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             float remainingScoops = change / scoopCost;\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             System.out.println("With your change, you can get " + decimalFormat.format(remainingScoops) + " more scoops of " + flavor);\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3             \cb1 \
\cb3             \cf8 \strokec8 /*\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8                 To Do:\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8                 - needs to create object for this order\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8                 - Needs to add order object to stack\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8                 - needs to print order object from stack\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3             \cf8 \strokec8 // creates object for this order\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 // IceCream orderName = new IceCream(name, flavor, noScoops, scoopCost, bill, change);\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 // stack.add(orderName);\cf4 \cb1 \strokec4 \
\
\cb3             \cb1 \
\cb3             \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "Would you like to Place another order? (Only enter \cf12 \strokec12 \\"\cf10 \strokec10 yes\cf12 \strokec12 \\"\cf10 \strokec10  or \cf12 \strokec12 \\"\cf10 \strokec10 no\cf12 \strokec12 \\"\cf10 \strokec10 )"\cf4 \strokec4 );\cb1 \
\cb3             \cf7 \strokec7 again\cf4 \strokec4  = \cf7 \strokec7 keyboard\cf4 \strokec4 .\cf6 \strokec6 nextLine\cf4 \strokec4 ();\cb1 \
\cb3            \cb1 \
\cb3         \} \cf9 \strokec9 while\cf4 \strokec4  (!(\cf7 \strokec7 again\cf4 \strokec4 .\cf6 \strokec6 equalsIgnoreCase\cf4 \strokec4 (\cf10 \strokec10 "yes"\cf4 \strokec4 )));\cb1 \
\cb3         \cb1 \
\cb3         \cb1 \
\
\cb3         \cf5 \strokec5 System\cf4 \strokec4 .\cf7 \strokec7 out\cf4 \strokec4 .\cf6 \strokec6 println\cf4 \strokec4 (\cf10 \strokec10 "\cf12 \strokec12 \\n\cf10 \strokec10 Thank you for visiting the Ice-cream stand! \cf12 \strokec12 \\n\cf10 \strokec10 Come again soon."\cf4 \strokec4 );\cb1 \
\
\cb3         \cf7 \strokec7 keyboard\cf4 \strokec4 .\cf6 \strokec6 close\cf4 \strokec4 ();\cf8 \strokec8 // closes keyboard Scanner object\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
}